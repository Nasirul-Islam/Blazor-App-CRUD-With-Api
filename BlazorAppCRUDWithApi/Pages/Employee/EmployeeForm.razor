@page "/employeeForm"
@using BlazorAppCRUDWithApi.Data
@inject NavigationManager Navigation
@inject HttpClient httpClient

@if (@Title!=null)
{
    <h2>Create An Employee</h2>
} else
{
    <h2>Edit Employee Information</h2>
}

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info">@responseMessage</div>
}

<EditForm Model="@employeeInfo" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="EmpID">Employee ID:</label>
                    <InputNumber id="EmpID" class="form-control" @bind-Value="employeeInfo.EmpID" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="FirstName">First Name:</label>
                    <InputText id="FirstName" class="form-control" @bind-Value="employeeInfo.FirstName" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="LastName">Last Name:</label>
                    <InputText id="LastName" class="form-control" @bind-Value="employeeInfo.LastName" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Email">Email:</label>
                    <InputText id="Email" class="form-control" @bind-Value="employeeInfo.Email" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="PhoneNumber">Phone Number:</label>
                    <InputText id="PhoneNumber" class="form-control" @bind-Value="employeeInfo.PhoneNumber" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="DateOfBirth">Date of Birth:</label>
                    <InputDate id="DateOfBirth" class="form-control" @bind-Value="employeeInfo.DateOfBirth" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="HireDate">Hire Date:</label>
                    <InputDate id="HireDate" class="form-control" @bind-Value="employeeInfo.HireDate" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="JobTitle">Job Title:</label>
                    <InputText id="JobTitle" class="form-control" @bind-Value="employeeInfo.JobTitle" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Department">Department:</label>
                    <InputText id="Department" class="form-control" @bind-Value="employeeInfo.Department" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Salary">Salary:</label>
                    <InputNumber id="Salary" class="form-control" @bind-Value="employeeInfo.Salary" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Address">Address:</label>
                    <InputText id="Address" class="form-control" @bind-Value="employeeInfo.Address" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="City">City:</label>
                    <InputText id="City" class="form-control" @bind-Value="employeeInfo.City" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="State">State:</label>
                    <InputText id="State" class="form-control" @bind-Value="employeeInfo.State" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="PostalCode">Postal Code:</label>
                    <InputText id="PostalCode" class="form-control" @bind-Value="employeeInfo.PostalCode" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Country">Country:</label>
                    <InputText id="Country" class="form-control" @bind-Value="employeeInfo.Country" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="IsActive">Is Active:</label>
                    <InputCheckbox id="IsActive" class="form-check-input" @bind-Value="employeeInfo.IsActive" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="CreatedDate">Created Date:</label>
                    <InputDate id="CreatedDate" class="form-control" @bind-Value="employeeInfo.CreatedDate" disabled />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="UpdatedDate">Updated Date:</label>
                    <InputDate id="UpdatedDate" class="form-control" @bind-Value="employeeInfo.UpdatedDate" disabled />
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12">
                <button type="submit" class="btn btn-primary w-100">Save</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private EmployeeInfo employeeInfo = new EmployeeInfo();
    private string? responseMessage;
    [Parameter]
    public string? Title { get; set; }
    private async Task HandleValidSubmit()
    {
        try
        {
            // Set the API endpoint
            string apiUrl = "http://192.168.0.124:305/api/employee";

            // Send a POST request with the employeeInfo model serialized as JSON
            HttpResponseMessage response = await httpClient.PostAsJsonAsync(apiUrl, employeeInfo);

            // Check if the response is successful
            if (response.IsSuccessStatusCode)
            {
                // Deserialize the response content to retrieve the message
                var responseContent = await response.Content.ReadFromJsonAsync<ApiResponse>();
                responseMessage = responseContent?.Message;

                // Log the success message
                Console.WriteLine(responseMessage);

                // Clear the form fields
                employeeInfo = new EmployeeInfo();

                // navigate to another page
                //Navigation.NavigateTo("/success");
            }
            else
            {
                // Log or handle API errors
                Console.WriteLine($"Error: {response.StatusCode}, {await response.Content.ReadAsStringAsync()}");
                Console.WriteLine(responseMessage);
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            responseMessage = $"Exception: {ex.Message}";
            Console.WriteLine(responseMessage);
        }
    }
    private class ApiResponse
    {
        public string? Message { get; set; }
    }
}
