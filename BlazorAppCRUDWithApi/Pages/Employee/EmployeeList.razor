@page "/employeeList"
@using System.Net.Http.Json
@using BlazorAppCRUDWithApi
@using BlazorAppCRUDWithApi.Data
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Employee List</PageTitle>

<h2>Employee List</h2>


@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Department</th>
                    <th>Job Title</th>
                    <th>Salary</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.EmpID</td>
                        <td>@employee.FirstName @employee.LastName</td>
                        <td>@employee.Email</td>
                        <td>@employee.PhoneNumber</td>
                        <td>@employee.Department</td>
                        <td>@employee.JobTitle</td>
                        <td>@employee.Salary?.ToString("C")</td>
                        <td>
                            <button class="btn btn-primary btn-sm me-1 my-1" @onclick="() => ViewEmployee(employee.EmpID)">View</button>
                            <button class="btn btn-primary btn-sm me-1 my-1" @onclick="() => EditEmployee(employee.EmpID)">Edit</button>
                            <button class="btn btn-danger btn-sm my-1" @onclick="() => DeleteEmployee(employee.EmpID)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}



@code {
    private List<EmployeeInfo>? employees;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // var url = "http://192.168.0.124:305/api/Employee";
            var url = $"http://192.168.0.222:401/api/Employee";
            employees = await httpClient.GetFromJsonAsync<List<EmployeeInfo>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee data: {ex.Message}");
        }
    }

    private void ViewEmployee(int empID)
    {
        var employee = employees?.Where(e => e.EmpID == empID).ToList();
        // Navigate to an Edit page or open a modal
        if (employee != null)
        {
            Navigation.NavigateTo($"/employeeView/{empID}");
        }
        Console.WriteLine($"Viewing Employee ID: {empID}");
    }

    private void EditEmployee(int empID)
    {
        var employee = employees?.Where(e => e.EmpID == empID).ToList();
        // Navigate to an Edit page or open a modal
        if (employee != null)
        {
            //editEmployee = employee;
            //Navigation.NavigateTo($"/employeeForm");
            Navigation.NavigateTo($"/employeeForm/{empID}");
        }
        Console.WriteLine($"Editing Employee ID: {empID}");
    }

    private async Task DeleteEmployee(int empID)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this employee?" });

        if (confirm)
        {
            try
            {
                // var url = $"http://192.168.0.124:305/api/Employee/{empID}";
                var url = $"http://192.168.0.222:401/api/Employee/{empID}";
                var response = await httpClient.DeleteAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    // Assuming the response body contains the message
                    var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                    if (result != null)
                    {
                        // Show success message in an alert
                        await JSRuntime.InvokeVoidAsync("alert", result.Message);

                        // Update the list of employees after successful deletion
                        employees = employees?.Where(e => e.EmpID != empID).ToList();
                    }
                }
                else
                {
                    // If the deletion fails, show an error message in an alert
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete employee.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting employee: {ex.Message}");
                Console.WriteLine($"Error deleting employee: {ex.Message}");
            }
        }
    }
    public class ApiResponse
    {
        public string? Message { get; set; }
    }

}

